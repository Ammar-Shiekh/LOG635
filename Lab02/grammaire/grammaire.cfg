
#  NOTES :
# - No accents!
# - Reads english

%start S

# ================================================= #
# Non terminal symbols (uppercase)
# ================================================= #

# Sequences (top of the graph)
# ------------------------------------------------- #
S[SEM = <app(?eq, ?t)> , SUJ = ?suj] -> PS[SEM=?eq , SUJ = ?suj] PP[SEM=?t]
S[SEM = <app(?eq, ?ppsem)> , SUJ = ?suj] -> CUSS[SEM=?eq, PPSEM=?ppsem, SUJ = ?suj]

PS[SEM=<app(?eq,?p)> , SUJ = ?suj] -> NP[SEM=?p , SUJ = ?suj] VP[SEM=?eq]

# complete unknown subject sentence
CUSS[SEM=<app(?eq, ?n)>, PPSEM=?ppsem, SUJ = ?n] -> USS[SEM=?eq, PPSEM=?ppsem] vEtre nprop[SEM=?n]

# unknown subject sentence
USS[SEM=?eq, PPSEM=?t] -> UNP proRel VP[SEM=?eq] PP[SEM=?t]

# Name groups
# ------------------------------------------------- #
NP[SEM=?name , SUJ=?name] -> nprop[SEM=?name]
NP[SEM=<ASD> , SUJ=<ASD>] -> pron

NP[SEM=?name] -> det n[SEM=?name]
NP[SEM=?name] -> SympSpec[SEM=?name]

# unknown name group
UNP -> det n


# Verb groups
# ------------------------------------------------- #
VP[SEM=?sympt] -> vAvoir SympSpec[SEM=?sympt]
VP[SEM=?sympt] -> vEtre SympSpec[SEM=?sympt]
VP[SEM=?loc] -> vEtre LocSpec[SEM=?loc]
VP[SEM=?cont] -> vEtre ContSpec[SEM=?cont]
VP[SEM=?inf] -> negBef vEtre negAft InfSpec[SEM=?inf]
VP[SEM=?cont] -> vEtre vDevenir ContSpec[SEM=?cont]


# Phrase preposition groups
# ------------------------------------------------- #
PP[SEM=?t] -> prep TSpec[SEM=?t]
PP[SEM=?l] -> prep NP[SEM=?l]


# ================================================= #
# Terminal symbols (Dictionnary) (lowercase)
# ================================================= #

# Proper names
# ------------------------------------------------- #
nprop[SEM=<lisa>] -> 'lisa'
nprop[SEM=<bart>] -> 'bart'
nprop[SEM=<marge>] -> 'marge'
nprop[SEM=<maggie>] -> 'maggie' | 'le' 'bebe'
nprop[SEM=<carl>] -> 'carl'
nprop[SEM=<ralph>] -> 'ralph'
nprop[SEM=<homer>] -> 'homer' | 'm' 'simpson' | 'monsieur' 'simpson'
nprop[SEM=<moe>] -> 'moe' | 'le' 'barman'
nprop[SEM=<lenny>] -> 'lenny'

# Pronoms
# ------------------------------------------------- #
pron -> 'elle' | 'il'

# Pronoms relatifs
# ------------------------------------------------- #
proRel -> 'qui'

# Names
# ------------------------------------------------- #
n -> 'personne'


# Symptoms Specifications
# ------------------------------------------------- #
SympSpec[SEM=<\p.\t. (hasDiarrheaAt(p,t))>] -> 'la' 'diarrhee'
SympSpec[SEM=<\p.\t. (isVomitingAt(p,t))>] -> 'vomit'
SympSpec[SEM=<\p.\t. (hasHeadacheAt(p,t))>] -> 'mal' 'a' 'la' 'tete'
SympSpec[SEM=<\p.\t. (isDeadAt(p,t))>] -> 'mort' | 'morte'
SympSpec[SEM=<\p.\t. (isBleedingAt(p,t))>] -> 'des' 'saignements'

# Symptoms Specifications
# ------------------------------------------------- #
InfSpec[SEM=<\p.\t. (notInfectedAt(p,t))>] -> 'infecte' | 'infectee'

#Contagion Specifications
#--------------------------------------------------#
ContSpec[SEM=<\p.\t. (wasContagiousAt(p,t))>] -> 'contagieux' | 'contagieuse'

#Contagion Specifications
#--------------------------------------------------#
ContSpec[SEM=<\p.\t. (wasContagiousAt(p,t))>] -> 'contagieux' | 'contagieuse'

# Location Specifications
# ------------------------------------------------- #
LocSpec[SEM=<\p.\t. (isAt(maison,p,t))>] -> 'a' 'la' 'maison' | 'a' 'son' 'domicile'
LocSpec[SEM=<\p.\t. (isAt(centrale,p,t))>] -> 'a' 'la' 'centrale' | 'a' 'son' 'travail'
LocSpec[SEM=<\p.\t. (isAt(ecole,p,t))>] -> 'a' 'l' 'ecole'

# Time Specifications
# ------------------------------------------------- #
TSpec[SEM=?num] -> num[SEM=?num, NB=s] numQual[NB=s]
TSpec[SEM=?num] -> num[SEM=?num, NB=p] numQual[NB=p]

# Verbs 
# ------------------------------------------------- #
vAvoir -> 'a'
vAvoir -> 'avait'
vEtre -> 'etait'
vEtre -> 'est'
vDevenir -> 'devenu' | 'devenue'


# Numbers
# ------------------------------------------------- #
num[SEM=<1>, NB=s] -> '1' | 'un'
num[SEM=<2>, NB=p] -> '2' | 'deux'
num[SEM=<3>, NB=p] -> '3' | 'trois'
num[SEM=<4>, NB=p] -> '4' | 'quatre'
num[SEM=<5>, NB=p] -> '5' | 'cinq'
num[SEM=<6>, NB=p] -> '6' | 'six'
num[SEM=<7>, NB=p] -> '7' | 'sept'
num[SEM=<8>, NB=p] -> '8' | 'huit'
num[SEM=<9>, NB=p] -> '9' | 'neuf'
num[SEM=<10>, NB=p] -> '10' | 'dix'
num[SEM=<11>, NB=p] -> '11' | 'onze'
num[SEM=<12>, NB=p] -> '12' | 'douze'
num[SEM=<13>, NB=p] -> '13' | 'treize'
num[SEM=<14>, NB=p] -> '14' | 'quatorze'
num[SEM=<15>, NB=p] -> '15' | 'quize'
num[SEM=<16>, NB=p] -> '16' | 'seize'
num[SEM=<17>, NB=p] -> '17' | 'dixsept'
num[SEM=<18>, NB=p] -> '18' | 'dixhuit'
num[SEM=<19>, NB=p] -> '19' | 'dixneuf'
num[SEM=<20>, NB=p] -> '20' | 'vingt'
num[SEM=<21>, NB=p] -> '21' | 'vingtun'

# Number qualifier
# ------------------------------------------------- #
numQual[NB=s] -> 'heure'
numQual[NB=p] -> 'heures'

# Determinants
# ------------------------------------------------- #
det -> 'la' | 'le'| 'les' | 'de' | 'un' | 'une' | 'des' | 'les' | 'du' | 'au' | 'aux' | 'l' | 'c' | 'd' 


# Prepositions
# ------------------------------------------------- #
prep -> 'a' | 'chez' | 'dans' | 'de' | 'entre' | 'jusque' | 'hors' | 'par' | 'pour' | 'sans' | 'vers'


# Negations markers
# ------------------------------------------------- #
negBef -> 'n' | 'ne'
negAft -> 'pas' | 'point'